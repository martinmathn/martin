<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Guardar Ubicaciones</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <style>
    #map { height: 400px; }
  </style>
</head>
<body class="bg-gray-100 p-6">
  <div class="max-w-3xl mx-auto bg-white p-6 rounded shadow">
    <h1 class="text-2xl font-bold mb-4">Guardar Ubicaciones</h1>
    <form id="locationForm" class="grid grid-cols-1 gap-4">
      <input type="text" id="name" placeholder="Nombre de la ubicación" class="border p-2 rounded" required>
      <input type="number" id="lat" placeholder="Latitud" step="any" class="border p-2 rounded" required>
      <input type="number" id="lng" placeholder="Longitud" step="any" class="border p-2 rounded" required>
      <textarea id="description" placeholder="Descripción" class="border p-2 rounded"></textarea>
      <div class="flex space-x-2">
        <button type="submit" class="bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700">Guardar</button>
        <button type="button" id="getLocation" class="bg-green-600 text-white py-2 px-4 rounded hover:bg-green-700">Usar mi ubicación</button>
      </div>
    </form>

    <input type="text" id="searchInput" placeholder="Buscar ubicación por nombre" class="border p-2 rounded mt-4 w-full">

    <h2 class="text-xl font-semibold mt-6">Ubicaciones Guardadas</h2>
    <ul id="locationList" class="mt-2 space-y-2"></ul>

    <h2 class="text-xl font-semibold mt-6">Mapa</h2>
    <div id="map" class="mt-2"></div>
  </div>

  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script>
    const locationForm = document.getElementById('locationForm');
    const locationList = document.getElementById('locationList');
    const getLocationBtn = document.getElementById('getLocation');
    const searchInput = document.getElementById('searchInput');
    const nameInput = document.getElementById('name');
    const latInput = document.getElementById('lat');
    const lngInput = document.getElementById('lng');
    const descriptionInput = document.getElementById('description');
    const map = L.map('map').setView([23.6345, -102.5528], 5);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '© OpenStreetMap contributors'
    }).addTo(map);

    const markers = [];

    function loadLocations(filter = '') {
      const locations = JSON.parse(localStorage.getItem('locations')) || [];
      locationList.innerHTML = '';
      markers.forEach(m => map.removeLayer(m));
      markers.length = 0;

      const filtered = locations.filter(loc => loc.name.toLowerCase().includes(filter.toLowerCase()));

      filtered.forEach((loc, index) => {
        const li = document.createElement('li');
        li.className = "border p-2 rounded bg-gray-50 flex justify-between items-start";
        li.innerHTML = `
          <div>
            <strong>${loc.name}</strong><br>
            Lat: ${loc.lat}, Lng: ${loc.lng}<br>
            ${loc.description || ''}
          </div>
          <div class="space-x-2">
            <button onclick="editLocation(${index})" class="text-blue-600 hover:underline">Editar</button>
            <button onclick="deleteLocation(${index})" class="text-red-600 hover:underline">Eliminar</button>
          </div>`;
        locationList.appendChild(li);

        const marker = L.marker([loc.lat, loc.lng]).addTo(map).bindPopup(`<strong>${loc.name}</strong><br>${loc.description}`);
        markers.push(marker);
      });

      if (filtered.length > 0) {
        const group = new L.featureGroup(markers);
        map.fitBounds(group.getBounds().pad(0.2));
      }
    }

    locationForm.addEventListener('submit', function(e) {
      e.preventDefault();
      const name = nameInput.value;
      const lat = parseFloat(latInput.value);
      const lng = parseFloat(lngInput.value);
      const description = descriptionInput.value;
      const editIndex = locationForm.dataset.editIndex;
      const locations = JSON.parse(localStorage.getItem('locations')) || [];

      const newLocation = { name, lat, lng, description };

      if (editIndex !== undefined) {
        locations[editIndex] = newLocation;
        delete locationForm.dataset.editIndex;
      } else {
        locations.push(newLocation);
      }

      localStorage.setItem('locations', JSON.stringify(locations));
      locationForm.reset();
      loadLocations();
    });

    function deleteLocation(index) {
      const locations = JSON.parse(localStorage.getItem('locations')) || [];
      locations.splice(index, 1);
      localStorage.setItem('locations', JSON.stringify(locations));
      loadLocations();
    }

    function editLocation(index) {
      const locations = JSON.parse(localStorage.getItem('locations')) || [];
      const loc = locations[index];
      nameInput.value = loc.name;
      latInput.value = loc.lat;
      lngInput.value = loc.lng;
      descriptionInput.value = loc.description;
      locationForm.dataset.editIndex = index;
    }

    getLocationBtn.addEventListener('click', () => {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(position => {
          latInput.value = position.coords.latitude;
          lngInput.value = position.coords.longitude;
        }, () => alert('No se pudo obtener la ubicación'));
      } else {
        alert('Geolocalización no soportada');
      }
    });

    searchInput.addEventListener('input', e => {
      loadLocations(e.target.value);
    });

    loadLocations();
  </script>
</body>
</html>